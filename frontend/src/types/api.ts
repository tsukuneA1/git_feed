/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Refresh the access token using a valid refresh token
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Invalidate refresh token and logout user
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get current authenticated user information
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GitHub OAuth redirect
         * @description Redirect to GitHub OAuth authorization
         */
        get: operations["githubOAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GitHub OAuth callback
         * @description Handle GitHub OAuth callback and generate tokens
         */
        get: operations["githubCallback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/languages/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular languages
         * @description Return the list of popular programming languages
         */
        get: operations["getPopularLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /**
             * Format: int64
             * @description User unique identifier
             */
            id: number;
            /** @description GitHub username */
            username: string;
            /** @description User display name */
            name?: string | null;
            /**
             * Format: uri
             * @description User avatar URL
             */
            avatar_url: string;
            /**
             * @description OAuth provider
             * @enum {string}
             */
            provider: "github";
            /** @description OAuth provider user ID */
            uid: string;
            /**
             * Format: date-time
             * @description User creation timestamp
             */
            created_at: string;
            /**
             * Format: date-time
             * @description User last update timestamp
             */
            updated_at: string;
        };
        RefreshTokenRequest: {
            /** @description Valid refresh token */
            refresh_token: string;
        };
        TokenResponse: {
            /** @description JWT access token */
            access_token: string;
        };
        LogoutRequest: {
            /** @description Refresh token to invalidate */
            refresh_token: string;
        };
        LogoutResponse: {
            /** @description Logout success message */
            message: string;
        };
        Error: {
            /** @description Error message */
            error: string;
            /** @description Additional error details */
            details?: {
                [key: string]: unknown;
            };
        };
        Language: {
            /** @description Unique key of language */
            slug: string;
            /** @description Display name */
            label: string;
            /** @description Hex color */
            color?: string | null;
            /** @description Popularity metric */
            bytes?: number | null;
            /** @description Repository count using this language */
            reposCount?: number | null;
        };
        PopularLanguagesResponse: {
            items: components["schemas"]["Language"][];
            total: number;
            /** Format: date-time */
            lastUpdated?: string | null;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": "Invalid request parameters"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": "Invalid or expired token"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": "Internal server error"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogoutRequest"];
            };
        };
        responses: {
            /** @description Logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    githubOAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to GitHub OAuth */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    githubCallback: {
        parameters: {
            query: {
                /** @description GitHub OAuth authorization code */
                code: string;
                /** @description OAuth state parameter */
                state?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to frontend with tokens or error */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPopularLanguages: {
        parameters: {
            query?: {
                /** @description Max items to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of popular languages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PopularLanguagesResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
